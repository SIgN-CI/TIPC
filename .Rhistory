output_dir=step3_dir,model_fnm=model_fnm)
setwd(pixel_dir)
fnms <- list.files(pattern = 'region_pixels_map.csv')
pixel_df <- read.csv(fnms, row.names = NULL, as.is = TRUE)
pixel_df$TMAcoor <- gsub(x=pixel_df$TMAcoor, pattern = ',', replacement = '_')
rownames(pixel_df) <- pixel_df$TMAcoor
pixel_df[,c('TMAcoor',"splid","tumor")] <- NULL
head(pixel_df)
colnames(pixel_df) <- gsub(x=colnames(pixel_df) , pattern = 'tumorpixels', replacement = 'Tumor')
colnames(pixel_df) <- gsub(x=colnames(pixel_df) , pattern = 'stromapixels', replacement = 'Stroma')
colnames(pixel_df) <- gsub(x=colnames(pixel_df) , pattern = 'otherpixels', replacement = 'Other')
colnames(pixel_df) <- gsub(x=colnames(pixel_df) , pattern = 'allpixels', replacement = 'overall')
head(pixel_df)
## convert pixels to mm2
megapixelarea <- 0.246# Conversion factor for area (square mm) covered by 1 megapixel at 20x scanning magnification
pixel_df <- pixel_df/1000000 * megapixelarea
calculate_density(area_data=pixel_df, k_neighbor_keyNm=k_neighbor_keyNm,
input_dir=step3_dir, output_dir=step3_dir)
########################################
#### Post-PIPA:: cell density survival analysis
########################################
surv_data <- clinico[, c("cens","time", covariates)]
colnames(surv_data)
density_surv_analysis(surv_data= surv_data, k_neighbor_keyNm=k_neighbor_keyNm,
input_dir=step3_dir, output_dir=post_PIPA_dir, KM_xlab='CRC specific survivals (years)')
surv_data <- clinico[, c("cens","time", covariates)]
colnames(surv_data)
prognosis_delineation=FALSE
#prognosis_delineation=TRUE
composition_surv_analysis(surv_data= surv_data, k_neighbor_keyNm=k_neighbor_keyNm,
prognosis_delineation = prognosis_delineation,
input_dir=step3_dir, output_dir=post_PIPA_dir,
KM_xlab='CRC specific survivals (years)')
composition_heatmap_overlayDens(surv_data= surv_data, k_neighbor_keyNm=k_neighbor_keyNm,
prognosis_delineation = prognosis_delineation,
input_dir=step3_dir, output_dir=post_PIPA_dir, KM_xlab='CRC specific survivals (years)')
########################################
#### Post-PIPA:: OVERALL phenotype differential analysis
########################################
overall_phenotype_differential_analysis(cell_data= cell_data, k_neighbor_keyNm=100,
input_dir=step3_dir, output_dir=post_PIPA_dir,
log_transform = TRUE,
ouput_bnm = 'Overall',decision_tree = TRUE)
prognosis_delineation=TRUE
composition_surv_analysis(surv_data= surv_data, k_neighbor_keyNm=k_neighbor_keyNm,
prognosis_delineation = prognosis_delineation,
input_dir=step3_dir, output_dir=post_PIPA_dir,
KM_xlab='CRC specific survivals (years)')
composition_heatmap_overlayDens(surv_data= surv_data, k_neighbor_keyNm=k_neighbor_keyNm,
prognosis_delineation = prognosis_delineation,
input_dir=step3_dir, output_dir=post_PIPA_dir, KM_xlab='CRC specific survivals (years)')
########################################
PIPA:: feature heat map
########################################
setwd(marker_map_dir)
selected_features <- read.csv('marker_map2.csv', as.is = TRUE)
selected_features$features <- paste0(selected_features$subcellular_compartment,'.Opal.',selected_features$OPAL,'.Mean')
selected_features$new_feature_names <- paste0(selected_features$marker,'_', selected_features$subcellular_compartment)
selected_features <- selected_features[,c("features","new_feature_names")]
grep(x=colnames(cell_data), pattern = paste0(selected_features$features, collapse = '|'), value = TRUE)
Viz_feature_heatmap_byPhenotype(cell_data= cell_data, k_neighbor_keyNm=k_neighbor_keyNm,
selected_features=selected_features,
input_dir=step3_dir, output_dir=post_PIPA_dir, plot_bnm='markerExprs')
phenotype_differential_analysis(cell_data= cell_data, k_neighbor_keyNm=k_neighbor_keyNm,
input_dir=step3_dir, output_dir=post_PIPA_dir,
ouput_bnm = 'allpheno',decision_tree = TRUE)
#### pheno_X vs others
# pheno_rename <- data.frame(key=c('phenotype7','phenotype1|phenotype2|phenotype3|phenotype5|
#                                  phenotype8|phenotype9'),
#                            value=c('phenotype7','others'), stringsAsFactors = FALSE)
# phenotype_differential_analysis(cell_data= cell_data, k_neighbor_keyNm=k_neighbor_keyNm,
#                                 input_dir=step3_dir, output_dir=post_PIPA_dir,
#                                 ouput_bnm = 'pheno7vsOthers', pheno_rename=pheno_rename,
#                                 decision_tree = TRUE, ref_level = 'phenotype7')
#
#
# pheno_rename <- data.frame(key=c('phenotype7','phenotype9'),
#                            value=c('phenotype7','phenotype9'), stringsAsFactors = FALSE)
# phenotype_differential_analysis(cell_data= cell_data, k_neighbor_keyNm=k_neighbor_keyNm,
#                                 input_dir=step3_dir, output_dir=post_PIPA_dir,
#                                 ouput_bnm = 'pheno7vs9', pheno_rename=pheno_rename,
#                                 decision_tree = TRUE, ref_level = 'phenotype7')
########################################
#### Post-PIPA:: Viz of phenotype differential analysis results
########################################
## load cell feature data
#cell_data <- get(load(file = file.path(cell_dir, 'CD3_cell_allfeatures.RData')))
#rm(cell_data_df)
## set paths
#selected_cutoff <- 0.1
#k_neighbor_keyNm=100
## load Wilcoxon results
setwd(file.path(post_PIPA_dir, paste0('phenotype_differential_k',k_neighbor_keyNm)))
load('Wilcoxon_allpheno.RData')
########################
## select OPAL features & M1:M2 index
########################
feature_keyNms <- c('Opal','DAPI')
FC_cutoff <- 2
plot_bnm <- paste0(paste0(feature_keyNms, collapse = '_'), '_FC',FC_cutoff,'_adjP')
## calculate adjusted P cutoff
ids_cols <- grep(x=colnames(cell_data), pattern = 'celltype|_ids', value = TRUE)
all_features <- setdiff(colnames(cell_data),ids_cols)
pairwise_pheno <- length(unique(wilcox_res$phenotypes))
#adjp_cutoff <- 0.05/(length(all_features) * pairwise_pheno)
## subsetting for selected features at FC and adjP
wilcox_res2 <- wilcox_res[grep(x=wilcox_res$features, pattern = paste0(feature_keyNms, collapse = '|')), ]
wilcox_res2 <- wilcox_res2[(wilcox_res2$bonferroni < 0.05) &
(abs(wilcox_res2$foldchange) > FC_cutoff), ]
dim(wilcox_res2)
table(wilcox_res2$phenotypes)
## calling plot function
Viz_phenotype_differential_analysis(cell_data= cell_data, k_neighbor_keyNm=k_neighbor_keyNm,
selected_features=wilcox_res2, plot_bnm=plot_bnm,
log_transform=TRUE,
input_dir=step3_dir, output_dir=post_PIPA_dir)
########################
## select morpho features
########################
feature_keyNms <- c('Area', 'Axis', 'Compactness')
FC_cutoff <- 0.5
plot_bnm <- paste0(paste0(feature_keyNms, collapse = '_'), '_FC',FC_cutoff,'_adjP')
## calculate adjusted P cutoff
ids_cols <- grep(x=colnames(cell_data), pattern = 'celltype|_ids', value = TRUE)
all_features <- setdiff(colnames(cell_data),ids_cols)
pairwise_pheno <- length(unique(wilcox_res$phenotypes))
#adjp_cutoff <- 0.05/(length(all_features) * pairwise_pheno)
## subsetting for selected features at FC and adjP
wilcox_res2 <- wilcox_res[grep(x=wilcox_res$features, pattern = paste0(feature_keyNms, collapse = '|')), ]
wilcox_res2 <- wilcox_res2[(wilcox_res2$bonferroni < 0.05) &
(abs(wilcox_res2$foldchange) > FC_cutoff), ]
dim(wilcox_res2)
table(wilcox_res2$phenotypes)
## calling plot function
Viz_phenotype_differential_analysis(cell_data= cell_data, k_neighbor_keyNm=k_neighbor_keyNm,
selected_features=wilcox_res2, plot_bnm=plot_bnm,
input_dir=step3_dir, output_dir=post_PIPA_dir, log_transform=TRUE)
#input_dir_step3 <- file.path(input_dir0, 'Step3_res')
setwd(step3_dir)
PIPA_res <- get(load(paste0('all_cell_phenotype',k_neighbor_keyNm,'.RData')))
PIPA_res$cell_ids <- gsub(x=PIPA_res$cell_ids, pattern = '_Stroma', replacement = '_S')
PIPA_res$cell_ids <- gsub(x=PIPA_res$cell_ids, pattern = '_Tumor', replacement = '_T')
########################
#### load known cell types
########################
setwd(cell_dir)
data <- get(load('multiTcell_XY_area.Rda'))
########################
#### remove non CD3+ T cells
########################
pheno_colids <- grep(x=colnames(data), pattern = '^Phenotype_')
NA_rs <- rowSums(is.na(data[, pheno_colids]))
which(NA_rs==length(pheno_colids))
########################
#### convert to long format
########################
library(tidyr)
data_long <- data%>%gather(key,phenotype,pheno_colids)
data_long <- data_long[!is.na(data_long$phenotype), ]
table(data_long$key)
## select celltypes
double_markers <- data_long %>% filter(phenotype %in% c('cd3pcd4p','cd3pcd8p','cd3pdn'))
triple_markers <- data_long %>% filter(phenotype %in%
c('cd3pcd8pcd45rop','cd3pcd4pcd45rop',
'cd3pcd4pfoxp3p','cd3pcd8pfoxp3p'))
########################
#### merge PIPA with known celltypes
########################
double_markers <- merge(double_markers, PIPA_res, by.x='TMAcore_XY_area', by.y='cell_ids',
suffixes = c('.known','.PIPA'))
double_markers_freq <- table(double_markers[,c("phenotype.known","phenotype.PIPA")])
double_markers_freq <- as.data.frame.matrix(double_markers_freq)
setwd(post_PIPA_dir)
write.csv(double_markers_freq, file = 'double_markers_freq.csv', row.names = TRUE)
triple_markers <- merge(triple_markers, PIPA_res, by.x='TMAcore_XY_area', by.y='cell_ids',
suffixes = c('.known','.PIPA'))
triple_markers_freq <- table(triple_markers[,c("phenotype.known","phenotype.PIPA")])
triple_markers_freq <- as.data.frame.matrix(triple_markers_freq)
setwd(post_PIPA_dir)
write.csv(triple_markers_freq, file = 'triple_markers_freq.csv', row.names = TRUE)
source('C:/Users/Mai Chan Lau/Dropbox/MC/PIPA/PIPA_R_package/Rscripts/PostPIPA_survAnalysis_adjKnownTcellDens.r')
source('C:/Users/Mai Chan Lau/Dropbox/MC/PIPA/PIPA_R_package/Rscripts/subsplPostPIPA_survAnalysis_adjKnownTcellDens.r')
source('C:/Users/Mai Chan Lau/Dropbox/MC/PIPA/PIPA_R_package/Rscripts/subsplPostPIPA_survAnalysis_adjKnownTcellDens.r')
#### ================================================================
#### ================================================================
#### Post PIPA survival analysis: adjusting for known T-cell density
#### ================================================================
#### ================================================================
rm(list=ls())
library(survival)
#root_path <- '/home/ml467'
root_path <- 'C:/Users/Mai Chan Lau/Dropbox'
#root_dir <- file.path(root_path, 'mIF_Tcell/PIPA_Batchone_seed888')
root_dir <- file.path(root_path, 'mIF_Tcell/PIPA_stageInformed23')
clinico_dir <- file.path(root_path,'mIF_Tcell/survival_analysis/data_20190615')
pixel_dir <-  file.path(root_path,'mIF_Tcell/Data')
output_dir_step1 <- file.path(root_dir, 'Step1_res/cutoff0.1')
cell_dir <-  file.path(output_dir_step1, 'Step3_res')
window_size=10000; max_batch=40; cell_dir <- file.path(root_dir,  paste0('Step3_res','_',window_size,'x',max_batch))
cell_dir
window_size=10000; max_batch=40; cell_dir <- file.path(output_dir_step1,  paste0('Step3_res','_',window_size,'x',max_batch))
sewtd(cell_dir)
setwd(cell_dir)
source('C:/Users/Mai Chan Lau/Dropbox/MC/PIPA/PIPA_R_package/Rscripts/subsplPostPIPA_survAnalysis_adjKnownTcellDens.r')
#### ================================================================
#### ================================================================
#### density-based survival analysis: only stage 2&3 tumors
#### ================================================================
#### ================================================================
rm(list=ls())
library(survival)
output_dir <-file.path(root_path,'mIF_Tcell/survival_analysis/stage2n3')
dir.create(output_dir)
setwd(clinico_dir)
flag_10yr <- TRUE
covariates <- c('stagecate2mj','tumorgmj','line30','line1mis','pik3camj','brafmtmj','krasmut4mj',
'cimphighmj','msimj','site3mj','prefhmj','female','age10','ydx5')
#clinico <- get(load(file = 'completeSurv_categorical.cell.density.RData'))
clinico <- get(load(file = 'completeSurv_cell.density.RData'))
rm(complete_density2)
############################
#### loading surv data
############################
setwd(clinico_dir)
clinico_dir <- file.path(root_path,'mIF_Tcell/survival_analysis/data_20190615')
output_dir <-file.path(root_path,'mIF_Tcell/survival_analysis/stage2n3')
dir.create(output_dir)
############################
#### loading surv data
############################
setwd(clinico_dir)
rm(list=ls())
library(survival)
#root_path <- '/home/ml467'
root_path <- 'C:/Users/Mai Chan Lau/Dropbox'
clinico_dir <- file.path(root_path,'mIF_Tcell/survival_analysis/data_20190615')
output_dir <-file.path(root_path,'mIF_Tcell/survival_analysis/stage2n3')
dir.create(output_dir)
############################
#### loading surv data
############################
setwd(clinico_dir)
flag_10yr <- FALSE
covariates <- c('stagecate2mj','tumorgmj','line30','line1mis','pik3camj','brafmtmj','krasmut4mj',
'cimphighmj','msimj','site3mj','prefhmj','female','age10','ydx5')
#clinico <- get(load(file = 'completeSurv_categorical.cell.density.RData'))
clinico <- get(load(file = 'completeSurv_cell.density.RData'))
rm(complete_density2)
rownames(clinico) <- clinico$TumorID
#densCat_cols <- grep(x=colnames(clinico), pattern = '4cat', value = TRUE)
densCat_cols <- grep(x=colnames(clinico), pattern = paste0('_',knownCT,'$'), value = TRUE)
head(clinico)
densCat_cols <- grep(x=colnames(clinico), pattern = 'density_', value = TRUE)
densCat_cols
## subsetting for covariates
clinico <- clinico[, colnames(clinico) %in% c('crcsurv', 'crccens',covariates, densCat_cols)]
############################
#### complete cases with survival
############################
clinico <- clinico[complete.cases(clinico[,c("crccens","crcsurv")]),]
############################
## 10yr surv
############################
if(flag_10yr){
crccens_10yr <- ifelse(clinico$crcsurv>=10, 0, clinico$crccens)
crcsurv_10yr <- ifelse(clinico$crcsurv>=10, 10, clinico$crcsurv)
#table(clinical[,c("cens","crccens_10yr")])
library(ggplot2)
ggplot(data=clinico, aes(x=crcsurv_10yr,y=crcsurv)) + geom_point()
clinico$crcsurv <- crcsurv_10yr
clinico$crccens <- crccens_10yr
}
## rename colnms
colnames(clinico) <- gsub(x=colnames(clinico), pattern = 'crcsurv', replacement = 'time')
colnames(clinico) <- gsub(x=colnames(clinico), pattern = 'crccens', replacement = 'cens')
densCat_cols
dens_cols <- grep(x=colnames(clinico), pattern = 'density_', value = TRUE)
pp <- dens_cols[1]
cat(pp, '\n')
data <- clinico[, pp]
data <- clinico[, c(pp,'time','cens')]
#### categorize knownCT density: quartiles -------
temp <- data[, pp]
q <- quantile(temp, na.rm = TRUE)
#### check if too many zeros
min_cut <- min(q)
if(sum(q==min_cut)>1){
cat0 <- temp[temp==min_cut]
cat0 <- cat0[!is.na(cat0)]
remaining <- temp[temp>min_cut]
q3<- quantile(remaining, probs = seq(from = 0, 1, by = 0.33), na.rm = TRUE)
q3[1] <- min(remaining, na.rm = TRUE)*0.99
q3[length(q3)] <- max(remaining, na.rm = TRUE)
q3_final <- c(min_cut,q3)
if(sum(duplicated(q3_final))>0){
density_data_sub$density_cat <- NULL
cat('Too many zero\n')
next
}
qq<- cut(temp, breaks=q3_final,
include.lowest=TRUE)
stopifnot(table(qq)[1]==length(cat0[!is.na(cat0)]))
}else{
qq<- cut(temp, breaks=quantile(temp, probs=seq(0,1, by=0.25), na.rm=TRUE),
include.lowest=TRUE)
}
#### simplify/rename density Quartiles
qq <- plyr::mapvalues(qq, from = levels(qq),
to = paste0(c('Q1','Q2','Q3','Q4')))
cat(knownCT_cols,':',table(qq),'\n')
data[,knownCT_cols] <- qq
cat(pp,':',table(qq),'\n')
data[,pp] <- qq
#clinico <- get(load(file = 'completeSurv_categorical.cell.density.RData'))
clinico <- get(load(file = 'completeSurv_cell.density.RData'))
############################
#### subsetting for stage 2&3 tumors
############################
clinico <- clinico[clinico$stageall %in% c(2,3), ]
table(clinico$stageall)
rownames(clinico) <- clinico$TumorID
dens_cols <- grep(x=colnames(clinico), pattern = 'density_', value = TRUE)
## subsetting for covariates
clinico <- clinico[, colnames(clinico) %in% c('crcsurv', 'crccens',covariates, dens_cols)]
############################
#### complete cases with survival
############################
clinico <- clinico[complete.cases(clinico[,c("crccens","crcsurv")]),]
## rename colnms
colnames(clinico) <- gsub(x=colnames(clinico), pattern = 'crcsurv', replacement = 'time')
colnames(clinico) <- gsub(x=colnames(clinico), pattern = 'crccens', replacement = 'cens')
pp <- dens_cols[1]
cat(pp, '\n')
data <- clinico[, c(pp,'time','cens')]
#### categorize knownCT density: quartiles -------
temp <- data[, pp]
q <- quantile(temp, na.rm = TRUE)
#### check if too many zeros
min_cut <- min(q)
if(sum(q==min_cut)>1){
cat0 <- temp[temp==min_cut]
cat0 <- cat0[!is.na(cat0)]
remaining <- temp[temp>min_cut]
q3<- quantile(remaining, probs = seq(from = 0, 1, by = 0.33), na.rm = TRUE)
q3[1] <- min(remaining, na.rm = TRUE)*0.99
q3[length(q3)] <- max(remaining, na.rm = TRUE)
q3_final <- c(min_cut,q3)
if(sum(duplicated(q3_final))>0){
density_data_sub$density_cat <- NULL
cat('Too many zero\n')
next
}
qq<- cut(temp, breaks=q3_final,
include.lowest=TRUE)
stopifnot(table(qq)[1]==length(cat0[!is.na(cat0)]))
}else{
qq<- cut(temp, breaks=quantile(temp, probs=seq(0,1, by=0.25), na.rm=TRUE),
include.lowest=TRUE)
}
#### simplify/rename density Quartiles
qq <- plyr::mapvalues(qq, from = levels(qq),
to = paste0(c('Q1','Q2','Q3','Q4')))
cat(pp,':',table(qq),'\n')
data[,pp] <- qq
#### multivariable Cox PH: PIPA pheno density + knownCT density
formula_mult <- as.formula(paste("Surv(time, cens)~",paste0(pp,collapse = '+')))
res.cox <- survival::coxph(formula_mult, data =  data)
summary(res.cox)
#### multivariable Cox PH: PIPA pheno density + knownCT density
formula_mult <- as.formula(paste("Surv(time, cens)~",paste0(c(covariates,pp),collapse = '+')))
res.cox <- survival::coxph(formula_mult, data =  data)
output_dir
colnames(data)
############################
#### loading surv data
############################
setwd(clinico_dir)
flag_10yr <- FALSE
covariates <- c('stagecate2mj','tumorgmj','line30','line1mis','pik3camj','brafmtmj','krasmut4mj',
'cimphighmj','msimj','site3mj','prefhmj','female','age10','ydx5')
#clinico <- get(load(file = 'completeSurv_categorical.cell.density.RData'))
clinico <- get(load(file = 'completeSurv_cell.density.RData'))
rm(complete_density2)
############################
#### subsetting for stage 2&3 tumors
############################
clinico <- clinico[clinico$stageall %in% c(2,3), ]
table(clinico$stageall)
rownames(clinico) <- clinico$TumorID
dens_cols <- grep(x=colnames(clinico), pattern = 'density_', value = TRUE)
## subsetting for covariates
clinico <- clinico[, colnames(clinico) %in% c('crcsurv', 'crccens',covariates, dens_cols)]
############################
#### complete cases with survival
############################
clinico <- clinico[complete.cases(clinico[,c("crccens","crcsurv")]),]
## rename colnms
colnames(clinico) <- gsub(x=colnames(clinico), pattern = 'crcsurv', replacement = 'time')
colnames(clinico) <- gsub(x=colnames(clinico), pattern = 'crccens', replacement = 'cens')
pp <- dens_cols[1]
cat(pp, '\n')
data <- clinico[, c(pp,'time','cens')]
#### categorize knownCT density: quartiles -------
temp <- data[, pp]
q <- quantile(temp, na.rm = TRUE)
#### check if too many zeros
min_cut <- min(q)
if(sum(q==min_cut)>1){
cat0 <- temp[temp==min_cut]
cat0 <- cat0[!is.na(cat0)]
remaining <- temp[temp>min_cut]
q3<- quantile(remaining, probs = seq(from = 0, 1, by = 0.33), na.rm = TRUE)
q3[1] <- min(remaining, na.rm = TRUE)*0.99
q3[length(q3)] <- max(remaining, na.rm = TRUE)
q3_final <- c(min_cut,q3)
if(sum(duplicated(q3_final))>0){
density_data_sub$density_cat <- NULL
cat('Too many zero\n')
next
}
qq<- cut(temp, breaks=q3_final,
include.lowest=TRUE)
stopifnot(table(qq)[1]==length(cat0[!is.na(cat0)]))
}else{
qq<- cut(temp, breaks=quantile(temp, probs=seq(0,1, by=0.25), na.rm=TRUE),
include.lowest=TRUE)
}
#### simplify/rename density Quartiles
qq <- plyr::mapvalues(qq, from = levels(qq),
to = paste0(c('Q1','Q2','Q3','Q4')))
cat(pp,':',table(qq),'\n')
data[,pp] <- qq
#### univariable Cox PH: PIPA pheno density + knownCT density
formula_uni <- as.formula(paste("Surv(time, cens)~",paste0(pp,collapse = '+')))
res.cox <- survival::coxph(formula_mult, data =  data)
res.cox <- survival::coxph(formula_uni, data =  data)
summary(res.cox)
#### multivariable Cox PH: PIPA pheno density + knownCT density
formula_mult <- as.formula(paste("Surv(time, cens)~",paste0(c(covariates,pp),collapse = '+')))
res.cox.mult <- survival::coxph(formula_mult, data =  data)
covariates
clinico$stagecate2mj
data <- clinico[, c(pp,'time','cens', covariates)]
#### multivariable Cox PH: PIPA pheno density + knownCT density
formula_mult <- as.formula(paste("Surv(time, cens)~",paste0(c(covariates,pp),collapse = '+')))
res.cox.mult <- survival::coxph(formula_mult, data =  data)
summary(res.cox.mult)
pp
data[,pp]
cat(pp,':',table(qq),'\n')
data[,pp] <- qq
#### univariable Cox PH: PIPA pheno density + knownCT density
formula_uni <- as.formula(paste("Surv(time, cens)~",paste0(pp,collapse = '+')))
res.cox <- survival::coxph(formula_uni, data =  data)
summary(res.cox)
#### multivariable Cox PH: PIPA pheno density + knownCT density
formula_mult <- as.formula(paste("Surv(time, cens)~",paste0(c(covariates,pp),collapse = '+')))
res.cox.mult <- survival::coxph(formula_mult, data =  data)
res.cox.mult)
summary(res.cox.mult)
source('C:/Users/Mai Chan Lau/Dropbox/mIF_Tcell/Rscripts/IF.survival_analysis/stage2n3.r')
postTIPC_SurvivalAnalysis
#### TIPC-package test run scripts
rm(list=ls())
no_batch <- 30
celltype <- 'Eosinophil'
hex_range <- c(40,110)
hex_len_keys <- seq(from = hex_range[1], to =hex_range[2], by = 10)
######################
#### set paths
######################
root_path <- 'C:/Users/Mai Chan Lau/Dropbox/'
######################
#### install and load TIPC package
######################
if(root_path == '/home/ml467/')package_dir <- file.path(root_path,'TIPC_package_ver0.1.0.9000/')
if(root_path == 'C:/Users/Mai Chan Lau/Dropbox/')package_dir <- file.path(root_path,'MC/TIPC/TIPC_package_ver0.1.0.9000/')
setwd(package_dir)
setwd("TIPC")
devtools::load_all()
cell_data_dir <- file.path(root_path,'HnE_analysis/TIPC')
output_dir  <- file.path(root_path,'HnE_analysis/TIPC', 'res')
dir.create(output_dir)
#### step 6b: making heat-map plots of TIPC spatial metrics overlay with DENSITY data
clinical <- get(load(file.path(root_path,'HnE_analysis/dens_surv_allLvl/CompletSurv_dens.RData')))
rm(complete_df2)
#### step 7.0: Preparing survival data
covariates <- c('stagecate2mj','tumorgmj','line30','line1mis','pik3camj','brafmtmj','krasmut4mj',
'cimphighmj','msimj','site3mj','prefhmj','female','age10','ydx5','crcsurv','crccens')
rownames(clinical) <- clinical$TumorID
clinical <- clinical[,colnames(clinical)%in% covariates]
## colnms
colnames(clinical) <- gsub(x=colnames(clinical), pattern = 'crcsurv', replacement = 'time')
colnames(clinical) <- gsub(x=colnames(clinical), pattern = 'crccens', replacement = 'cens')
hex_len_keys
ll=50
ll=40
input_dir <- file.path(output_dir,paste0("TIPC_hexLen",ll))
clustering_subfolder_nm <- 'ConsensusClusterPlus_test'
postTIPC_SurvivalAnalysis(root_dir = input_dir, clustering_subfolder_nm=clustering_subfolder_nm,all_ref_check = TRUE,
method = 'multivariate', surv_data = clinical, min_cluster_size = 20)
hex_len_keys
hex_len_keys <- hex_len_keys[-1]
#### step 7: Survival analysis
for (ll in hex_len_keys){
input_dir <- file.path(output_dir,paste0("TIPC_hexLen",ll))
clustering_subfolder_nm <- 'ConsensusClusterPlus_test'
# postTIPC_SurvivalAnalysis(root_dir = input_dir, clustering_subfolder_nm=clustering_subfolder_nm,
# method = 'univariate', surv_data = clinical)
postTIPC_SurvivalAnalysis(root_dir = input_dir, clustering_subfolder_nm=clustering_subfolder_nm,all_ref_check = TRUE,
method = 'multivariate', surv_data = clinical, min_cluster_size = 20)
}
